from PyQt5.QtWidgets import QWidget,QApplication
from PyQt5.QtCore import QTimer
#import the interface design generated by Qt designer
from . import FlowMeter_Ui
import time


class Panel(QWidget):
    def __init__(self,parent=None,instr=None,lock=None,title='Instrument Panel'):
        # This class derivates from a Qt Widget so we have to call
        # the class builder ".__init__()"
        QWidget.__init__(self)
        # "self" is now a Qt Widget, then we load the user interface
        # generated with QtDesigner and call it self.ui
        self.ui = FlowMeter_Ui.Ui_Panel()
        # Now we have to feed the GUI building method of this object (self.ui)
        # with the current Qt Widget 'self', but the widgets from the design will actually be built as children
        # of the object self.ui
        self.ui.setupUi(self)
        self.setWindowTitle(title)
        self.reserved_access_to_instr=lock
        self.instr=instr
        self.monitor_timer = QTimer()
        # self.channel=self.ui.channel.currentIndex()
        #The timer would not wait for the completion of the task otherwise
        self.monitor_timer.setSingleShot(True)
        self.monitor_timer.timeout.connect(self.monitor)
        self.firsttime=0
        #bug: if the box is checked in the .ui file, the system freezes
        #if self.ui.monitor.isChecked():self.monitor()


    def monitor(self):
        state = self.ui.monitor.isChecked()
        voltage_raw = (self.instr.pin.read())*5.0/1023.0 #converting the analog reading to an actual voltage
        # voltage_raw=2.
        if voltage_raw <=1.:
            self.clear()
            # self.ui.lcdNumber_6.display(9999)
            # print('voltage raw is:'+str(voltage_raw))
            print("This measurement is erroneous.")
        else:
            self.ui.label_2.setText("Measurement is Valid")

        # voltage_corrected=(voltage_raw*4.)
        # print("voltage corrected is:"+str(voltage_corrected))
        if state!=1:
            self.monitor_timer.stop()
        elif state and not(self.monitor_timer.isActive()):
            self.firsttime+=1
            with self.reserved_access_to_instr:
                flow_rate = (voltage_raw*-0.25)+1.
                self.ui.lcdNumber_6.display(flow_rate)
            self.monitor_timer.start(self.ui.refresh_rate.value() * 1000)

    def clear(self):
        self.ui.label_2.setText("Measurement is Erroneous")

    def check_state(self):
        pass

    def update_timer_timeout(self, sec):
        # The value must be converted to milliseconds
        secs=float(sec.strip('secs'))
        self.monitor_timer.setInterval( secs * 1000)



if __name__ == "__main__":
    import sys
    import pyfirmata
    app = QApplication(sys.argv)
    window = Panel(app)
    window.show()
    sys.exit(app.exec_())
