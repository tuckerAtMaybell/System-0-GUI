from PyQt5.QtWidgets import QWidget,QApplication
from PyQt5.QtCore import QTimer
#import the interface design generated by Qt designer
from . import Heaters_Ui
import simple_pid
#PID documentation can be found here:
#   https://github.com/m-lundberg/simple-pid/blob/master/README.md
import time


class Panel(QWidget):
    def __init__(self,parent=None,instr=None,lock=None,title='Instrument Panel'):
        # This class derivates from a Qt Widget so we have to call
        # the class builder ".__init__()"
        QWidget.__init__(self)
        # "self" is now a Qt Widget, then we load the user interface
        # generated with QtDesigner and call it self.ui
        self.ui = Heaters_Ui.Ui_Panel()
        # Now we have to feed the GUI building method of this object (self.ui)
        # with the current Qt Widget 'self', but the widgets from the design will actually be built as children
        # of the object self.ui
        self.ui.setupUi(self)
        self.setWindowTitle(title)
        self.reserved_access_to_instr=lock
        self.instr=instr
        self.monitor_timer = QTimer()
        #The timer would not wait for the completion of the task otherwise
        self.monitor_timer.setSingleShot(True)
        self.monitor_timer.timeout.connect(self.monitor)
        self.firsttime=0
        #bug: if the box is checked in the .ui file, the system freezes
        #if self.ui.monitor.isChecked():self.monitor()

        self.radio_buttons={
            '1':self.ui.radioButton_1,
            '2':self.ui.radioButton_2,
            '3':self.ui.radioButton_3,
            '4':self.ui.radioButton_4,
            '5':self.ui.radioButton_5,
            '6':self.ui.radioButton_6,
            '7':self.ui.radioButton_7,
            '8':self.ui.radioButton_8,
        }

    def turn_on_PWM(self):
        # sender_button=self.sender()
        # self.ID = sender_button.objectName()
        self.heater=self.sender().objectName().strip("radioButton_") #returns the number of the radio button that was flipped (1-8)
        # print(self.heater)
        self.pin_ID=int(self.heater)+1
        self.heater_id=self.radio_buttons[self.heater] #correlates the name with the radiobutton obj
        # print(self.heater_id)
        self.ui.heater_instance=self.radio_buttons[self.sender().objectName().strip("radioButton_")] #sets the particular instance of valve
        # self.ui.valve_instance = self.vd[id.objectName()]

        if self.ui.heater_instance.isChecked() is True:    #turn on if hit
            self.instr.io.digital[self.pin_ID].write(1)
            print("Heater " + self.heater+ " is powered on")

        elif self.ui.heater_instance.isChecked() is False:     #turn off if hit
            self.instr.io.digital[self.pin_ID].write(0)
            print("Heater " + self.heater+ " is powered off")





    def change_P_value(self):
        #update the value of the P
        #update other (I,D) values
        #call the PID controller
        #pass the temp to it and continue to run until temp is reached
        pass

    def change_I_value(self):
        #update the value of the I
        #update other (P,D) values
        #call the PID controller
        #pass the temp to it and continue to run until temp is reached
        pass

    def change_D_value(self):
        #update the value of the D
        #update other (P,I) values
        #call the PID controller
        #pass the temp to it and continue to run until temp is reached
        pass




    def monitor(self):
        state = self.ui.monitor.isChecked()
        if state != 1:
            # print("frig")
            self.monitor_timer.stop()
            #self.ui.close()
        elif state and not (self.monitor_timer.isActive()):
            self.firsttime += 1
            # print("FRIG")
            #self.ui.open()
            with self.reserved_access_to_instr:
               pass
            self.monitor_timer.start(self.ui.refresh_rate.value() * 1000)

    def update_timer_timeout(self, sec):
        # The value must be converted to milliseconds
        secs=float(sec.strip('secs'))
        self.monitor_timer.setInterval( secs * 1000)

    def display(self):
        #how to get temperature from lakeshore to display here?
        #this is also needed for the operation of the PID
        pass


if __name__ == "__main__":
    import sys
    import pyfirmata
    app = QApplication(sys.argv)
    window = Panel(app)
    window.show()

    sys.exit(app.exec_())

